#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for disjoint set
struct Subset {
    int parent;
    int rank;
};

// Function prototypes
int find(struct Subset subsets[], int i);
void unionSets(struct Subset subsets[], int x, int y);
int compareEdges(const void* a, const void* b);
void kruskalMST(struct Edge edges[], int V, int E);

int main() {
    // Example graph with 4 vertices and 5 edges
    int V = 4; // Number of vertices
    int E = 5; // Number of edges
    struct Edge edges[] = {
        {0, 1, 1},
        {0, 2, 2},
        {1, 2, 3},
        {1, 3, 4},
        {2, 3, 5}
    };

    // Run Kruskal's Algorithm
    kruskalMST(edges, V, E);

    return 0;
}

// Find set of an element i (uses path compression technique)
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Union of two sets of x and y (uses union by rank)
void unionSets(struct Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    // Attach smaller rank tree under the root of higher rank tree
    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        // If ranks are the same, make one as the root and increment its rank
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Compare function for qsort to sort edges based on their weights
int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

// Kruskal's Algorithm to find Minimum Spanning Tree
void kruskalMST(struct Edge edges[], int V, int E) {
    // Allocate memory for subsets and initialize them
    struct Subset* subsets = (struct Subset*)malloc(V * sizeof(struct Subset));
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    // Sort edges in non-decreasing order of their weights
    qsort(edges, E, sizeof(edges[0]), compareEdges);

    printf("Minimum Spanning Tree:\n");

    // Process each edge and add it to the MST if it doesn't form a cycle
    for (int i = 0, e = 0; e < V - 1; i++) {
        int rootX = find(subsets, edges[i].src);
        int rootY = find(subsets, edges[i].dest);

        // If including this edge doesn't cause a cycle, add it to the MST
        if (rootX != rootY) {
            printf("%d -- %d (Weight: %d)\n", edges[i].src, edges[i].dest, edges[i].weight);
            unionSets(subsets, rootX, rootY);
            e++;
        }
    }

    // Free allocated memory
    free(subsets);
}
